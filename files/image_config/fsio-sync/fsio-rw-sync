#!/usr/bin/env python3

import os
import sys
import json
import syslog
from sonic_py_common import daemon_base
from time import time

BASE_PATH = "/sys/block"
FSSTATS_FILE = "/host/pmon/stormond/fsio-rw-stats.json"
STATE_DB_FIELDS = ["total_fsio_reads", "total_fsio_writes", "latest_fsio_reads", "latest_fsio_writes"]
SYSLOG_ID="fsio-rw-sync"
FSSTATS_FILE_SYNC_ERROR = 127

devices = []
json_file_dict = {}

def log_info(msg):
    syslog.openlog(SYSLOG_ID)
    syslog.syslog(syslog.LOG_INFO, msg)
    syslog.closelog()

def log_error(msg):
    syslog.openlog(SYSLOG_ID)
    syslog.syslog(syslog.LOG_ERR, msg)
    syslog.closelog()

def get_storage_disks():
    fdlist = os.listdir(BASE_PATH)
    for fd in fdlist:
        if 'boot' in fd or 'loop' in fd:
            continue
        else:
            devices.append(fd)
            json_file_dict[fd] = {}

def main():

    log_info("Syncing total and latest procfs reads and writes from STATE_DB to JSON file")
    try:
        state_db = daemon_base.db_connect("STATE_DB")
        get_storage_disks()

        # Sync accumulated and latest procfs reads and writes from STATE_DB
        for device in devices:
            for field in STATE_DB_FIELDS:
                json_file_dict[device][field] = state_db.hget('STORAGE_INFO|{}'.format(device), field)
        
        json_file_dict["successful_sync_time"] = state_db.hget('STORAGE_INFO|FSSTATS_SYNC', "successful_sync_time")

        with open(FSSTATS_FILE, 'w+') as f:
            f.write(json.dumps(json_file_dict))
    except Exception as ex:
        log_error("Unable to sync state_db to disk: {}".format(ex))


if __name__ == "__main__":
    main()